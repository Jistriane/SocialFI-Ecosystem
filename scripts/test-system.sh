# Copyright (c) 2024-2034 jistriane Brunielli Silva de Oliveira <jistriane@live.com>
# Criado do zero por mim. Removal of this notice is prohibited for 10 years.

#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para exibir mensagens com timestamp
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERRO: $1${NC}"
}

warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] AVISO: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Fun√ß√£o para verificar vers√£o do Node.js
check_node_version() {
    local required_version="18.0.0"
    if ! command -v node > /dev/null; then
        error "Node.js n√£o est√° instalado"
        return 1
    fi
    
    local current_version=$(node -v | cut -d'v' -f2)
    
    if [ "$(printf '%s\n' "$required_version" "$current_version" | sort -V | head -n1)" != "$required_version" ]; then
        error "Node.js vers√£o $required_version ou superior √© necess√°ria. Vers√£o atual: $current_version"
        return 1
    fi
    log "‚úÖ Node.js vers√£o $current_version OK"
    return 0
}

# Fun√ß√£o para verificar estrutura do projeto
check_project_structure() {
    log "üîç Verificando estrutura do projeto..."
    
    local errors=0
    
    # Verificar arquivos principais
    if [ ! -f "$PROJECT_ROOT/package.json" ]; then
        error "‚ùå package.json n√£o encontrado na raiz"
        errors=$((errors + 1))
    else
        log "‚úÖ package.json encontrado na raiz"
    fi
    
    if [ ! -f "$PROJECT_ROOT/hardhat.config.js" ]; then
        error "‚ùå hardhat.config.js n√£o encontrado"
        errors=$((errors + 1))
    else
        log "‚úÖ hardhat.config.js encontrado"
    fi
    
    # Verificar diret√≥rios principais
    for dir in "contracts" "backend" "frontend" "test"; do
        if [ ! -d "$PROJECT_ROOT/$dir" ]; then
            error "‚ùå Diret√≥rio $dir n√£o encontrado"
            errors=$((errors + 1))
        else
            log "‚úÖ Diret√≥rio $dir encontrado"
        fi
    done
    
    # Verificar arquivos do backend
    if [ ! -f "$PROJECT_ROOT/backend/package.json" ]; then
        error "‚ùå Backend package.json n√£o encontrado"
        errors=$((errors + 1))
    else
        log "‚úÖ Backend package.json encontrado"
    fi
    
    if [ ! -f "$PROJECT_ROOT/backend/src/server.ts" ]; then
        error "‚ùå Backend server.ts n√£o encontrado"
        errors=$((errors + 1))
    else
        log "‚úÖ Backend server.ts encontrado"
    fi
    
    # Verificar arquivos do frontend
    if [ ! -f "$PROJECT_ROOT/frontend/package.json" ]; then
        error "‚ùå Frontend package.json n√£o encontrado"
        errors=$((errors + 1))
    else
        log "‚úÖ Frontend package.json encontrado"
    fi
    
    if [ ! -f "$PROJECT_ROOT/frontend/next.config.js" ]; then
        error "‚ùå Frontend next.config.js n√£o encontrado"
        errors=$((errors + 1))
    else
        log "‚úÖ Frontend next.config.js encontrado"
    fi
    
    return $errors
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    log "üì¶ Verificando depend√™ncias..."
    
    local errors=0
    
    # Verificar depend√™ncias da raiz
    cd "$PROJECT_ROOT" || return 1
    if [ ! -d "node_modules" ]; then
        warning "‚ö†Ô∏è  Depend√™ncias da raiz n√£o instaladas"
        errors=$((errors + 1))
    else
        log "‚úÖ Depend√™ncias da raiz instaladas"
    fi
    
    # Verificar depend√™ncias do backend
    cd "$PROJECT_ROOT/backend" || return 1
    if [ ! -d "node_modules" ]; then
        warning "‚ö†Ô∏è  Depend√™ncias do backend n√£o instaladas"
        errors=$((errors + 1))
    else
        log "‚úÖ Depend√™ncias do backend instaladas"
    fi
    
    # Verificar depend√™ncias do frontend
    cd "$PROJECT_ROOT/frontend" || return 1
    if [ ! -d "node_modules" ]; then
        warning "‚ö†Ô∏è  Depend√™ncias do frontend n√£o instaladas"
        errors=$((errors + 1))
    else
        log "‚úÖ Depend√™ncias do frontend instaladas"
    fi
    
    return $errors
}

# Fun√ß√£o para verificar compila√ß√£o
check_compilation() {
    log "üîß Verificando compila√ß√£o..."
    
    local errors=0
    
    # Verificar compila√ß√£o dos contratos
    cd "$PROJECT_ROOT" || return 1
    if [ ! -d "artifacts/contracts" ]; then
        warning "‚ö†Ô∏è  Contratos n√£o compilados"
        info "Tentando compilar contratos..."
        if npm run compile > compile.log 2>&1; then
            log "‚úÖ Contratos compilados com sucesso"
        else
            error "‚ùå Falha ao compilar contratos (verifique compile.log)"
            errors=$((errors + 1))
        fi
    else
        log "‚úÖ Contratos j√° compilados"
    fi
    
    # Verificar compila√ß√£o do backend
    cd "$PROJECT_ROOT/backend" || return 1
    if [ ! -d "dist" ]; then
        warning "‚ö†Ô∏è  Backend n√£o compilado"
        info "Tentando compilar backend..."
        if npm run build > ../backend-build.log 2>&1; then
            log "‚úÖ Backend compilado com sucesso"
        else
            error "‚ùå Falha ao compilar backend (verifique backend-build.log)"
            errors=$((errors + 1))
        fi
    else
        log "‚úÖ Backend j√° compilado"
    fi
    
    return $errors
}

# Fun√ß√£o para executar testes
run_tests() {
    log "üß™ Executando testes..."
    
    local test_results=()
    
    # Testes dos contratos
    info "Testando contratos..."
    cd "$PROJECT_ROOT" || return 1
    if timeout 300 npm test > test-contracts-check.log 2>&1; then
        log "‚úÖ Testes dos contratos: PASSOU"
        test_results+=("CONTRATOS:PASSOU")
    else
        error "‚ùå Testes dos contratos: FALHOU"
        test_results+=("CONTRATOS:FALHOU")
    fi
    
    # Testes do backend
    info "Testando backend..."
    cd "$PROJECT_ROOT/backend" || return 1
    if timeout 300 npm test > ../test-backend-check.log 2>&1; then
        log "‚úÖ Testes do backend: PASSOU"
        test_results+=("BACKEND:PASSOU")
    else
        error "‚ùå Testes do backend: FALHOU"
        test_results+=("BACKEND:FALHOU")
    fi
    
    # Testes do frontend
    info "Testando frontend..."
    cd "$PROJECT_ROOT/frontend" || return 1
    if timeout 300 npm test -- --passWithNoTests --silent > ../test-frontend-check.log 2>&1; then
        log "‚úÖ Testes do frontend: PASSOU"
        test_results+=("FRONTEND:PASSOU")
    else
        error "‚ùå Testes do frontend: FALHOU"
        test_results+=("FRONTEND:FALHOU")
    fi
    
    # Salvar resultados
    printf '%s\n' "${test_results[@]}" > "$PROJECT_ROOT/test-results.txt"
    
    return 0
}

# Fun√ß√£o para verificar arquivos de configura√ß√£o
check_config_files() {
    log "‚öôÔ∏è  Verificando arquivos de configura√ß√£o..."
    
    local errors=0
    
    # Verificar arquivos .env
    for dir in "backend" "frontend"; do
        if [ ! -f "$PROJECT_ROOT/$dir/.env" ] && [ ! -f "$PROJECT_ROOT/$dir/.env-dev" ]; then
            error "‚ùå Arquivo .env ou .env-dev n√£o encontrado em $dir"
            errors=$((errors + 1))
        else
            log "‚úÖ Arquivo de ambiente encontrado em $dir"
        fi
    done
    
    # Verificar configura√ß√µes espec√≠ficas
    if [ -f "$PROJECT_ROOT/backend/src/config/index.ts" ]; then
        log "‚úÖ Configura√ß√£o do backend encontrada"
    else
        error "‚ùå Configura√ß√£o do backend n√£o encontrada"
        errors=$((errors + 1))
    fi
    
    if [ -f "$PROJECT_ROOT/frontend/next.config.js" ]; then
        log "‚úÖ Configura√ß√£o do frontend encontrada"
    else
        error "‚ùå Configura√ß√£o do frontend n√£o encontrada"
        errors=$((errors + 1))
    fi
    
    return $errors
}

# Fun√ß√£o para gerar relat√≥rio final
generate_report() {
    log "üìã Gerando relat√≥rio final..."
    
    local report_file="$PROJECT_ROOT/system-check-report.txt"
    
    cat > "$report_file" << EOF
========================================
    RELAT√ìRIO DE VERIFICA√á√ÉO DO SISTEMA
    SocialFI Ecosystem
    Data: $(date '+%Y-%m-%d %H:%M:%S')
========================================

ESTRUTURA DO PROJETO: $PROJECT_STRUCTURE_STATUS
DEPEND√äNCIAS: $DEPENDENCIES_STATUS
COMPILA√á√ÉO: $COMPILATION_STATUS
CONFIGURA√á√ÉO: $CONFIG_STATUS

RESULTADOS DOS TESTES:
EOF
    
    if [ -f "$PROJECT_ROOT/test-results.txt" ]; then
        cat "$PROJECT_ROOT/test-results.txt" >> "$report_file"
    else
        echo "Testes n√£o executados" >> "$report_file"
    fi
    
    cat >> "$report_file" << EOF

LOGS DISPON√çVEIS:
- Compila√ß√£o: compile.log
- Backend Build: backend-build.log
- Testes Contratos: test-contracts-check.log
- Testes Backend: test-backend-check.log
- Testes Frontend: test-frontend-check.log

RECOMENDA√á√ïES:
EOF
    
    if [ "$PROJECT_STRUCTURE_STATUS" != "OK" ]; then
        echo "- Verifique a estrutura do projeto" >> "$report_file"
    fi
    
    if [ "$DEPENDENCIES_STATUS" != "OK" ]; then
        echo "- Execute: npm install em cada diret√≥rio" >> "$report_file"
    fi
    
    if [ "$COMPILATION_STATUS" != "OK" ]; then
        echo "- Verifique os erros de compila√ß√£o nos logs" >> "$report_file"
    fi
    
    if [ "$CONFIG_STATUS" != "OK" ]; then
        echo "- Configure os arquivos .env necess√°rios" >> "$report_file"
    fi
    
    echo "========================================" >> "$report_file"
    
    log "‚úÖ Relat√≥rio salvo em: $report_file"
}

# Fun√ß√£o para exibir resumo
show_summary() {
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}    RESUMO DA VERIFICA√á√ÉO DO SISTEMA    ${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo -e "${GREEN}Estrutura do Projeto: $PROJECT_STRUCTURE_STATUS${NC}"
    echo -e "${GREEN}Depend√™ncias: $DEPENDENCIES_STATUS${NC}"
    echo -e "${GREEN}Compila√ß√£o: $COMPILATION_STATUS${NC}"
    echo -e "${GREEN}Configura√ß√£o: $CONFIG_STATUS${NC}"
    echo -e "${BLUE}========================================${NC}"
    
    if [ -f "$PROJECT_ROOT/test-results.txt" ]; then
        echo -e "${YELLOW}Resultados dos Testes:${NC}"
        while IFS=: read -r component status; do
            if [ "$status" = "PASSOU" ]; then
                echo -e "${GREEN}  $component: ‚úÖ $status${NC}"
            else
                echo -e "${RED}  $component: ‚ùå $status${NC}"
            fi
        done < "$PROJECT_ROOT/test-results.txt"
        echo -e "${BLUE}========================================${NC}"
    fi
    
    echo -e "${YELLOW}Relat√≥rio completo: system-check-report.txt${NC}"
    echo -e "${BLUE}========================================${NC}"
}

# IN√çCIO DO SCRIPT PRINCIPAL
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}    SocialFI Ecosystem - System Test    ${NC}"
echo -e "${BLUE}    Verifica√ß√£o Completa do Sistema     ${NC}"
echo -e "${BLUE}========================================${NC}"

# Diret√≥rio raiz do projeto
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
log "üìÅ Diret√≥rio do projeto: $PROJECT_ROOT"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "$PROJECT_ROOT/package.json" ]; then
    error "‚ùå Execute o script a partir da raiz do projeto SocialFI Ecosystem"
    exit 1
fi

# 1. Verificar Node.js
if check_node_version; then
    NODE_STATUS="OK"
else
    NODE_STATUS="ERRO"
    error "‚ùå Verifique a instala√ß√£o do Node.js"
    exit 1
fi

# 2. Verificar estrutura do projeto
if check_project_structure; then
    PROJECT_STRUCTURE_STATUS="OK"
else
    PROJECT_STRUCTURE_STATUS="ERRO"
fi

# 3. Verificar depend√™ncias
if check_dependencies; then
    DEPENDENCIES_STATUS="OK"
else
    DEPENDENCIES_STATUS="AVISO"
fi

# 4. Verificar compila√ß√£o
if check_compilation; then
    COMPILATION_STATUS="OK"
else
    COMPILATION_STATUS="ERRO"
fi

# 5. Verificar configura√ß√£o
if check_config_files; then
    CONFIG_STATUS="OK"
else
    CONFIG_STATUS="ERRO"
fi

# 6. Executar testes
run_tests

# 7. Gerar relat√≥rio
generate_report

# 8. Exibir resumo
show_summary

# Determinar c√≥digo de sa√≠da
if [ "$PROJECT_STRUCTURE_STATUS" = "OK" ] && [ "$COMPILATION_STATUS" = "OK" ] && [ "$CONFIG_STATUS" = "OK" ]; then
    log "üéâ Sistema verificado com sucesso!"
    exit 0
else
    error "‚ö†Ô∏è  Sistema possui problemas que precisam ser corrigidos"
    exit 1
fi 